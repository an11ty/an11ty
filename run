#!/usr/bin/env node

const { version } = require('./package.json')
const { mergefs } = require('mergefs')
const { premove } = require('premove')
const { promisify } = require('util')
const { spawn } = require('child_process')
const CheapWatch = require('cheap-watch')
const fs = require('fs')
const ncp = promisify(require('ncp').ncp)
const path = require('path')
const sade = require('sade')

// since eleventy resolves to the JS and not the bin, we need
// to safely locate the bin file
const locateEleventyBin = () => {
	let eleventyPath = require.resolve('@11ty/eleventy', {
		paths: [ process.cwd() ]
	})
	let json
	while (!json) {
		try {
			json = JSON.parse(fs.readFileSync(path.join(eleventyPath, 'package.json'), 'utf8'))
		} catch (error) {
			if (error.code === 'ENOTDIR' || error.code === 'ENOENT') {
				eleventyPath = path.resolve(eleventyPath, '..')
			} else {
				console.error(error)
				process.exit(1)
			}
		}
	}
	return path.join(eleventyPath, json.bin && json.bin.eleventy)
}

// Created on every run, these are `await`ed at the end so be
// careful in how you add and watch them.
const folderMonitors = []
const addWatcher = async (merge, output, dir) => {
	console.log('Adding watcher to:', dir)
	const onSuccess = () => {}
	const onError = error => {
		console.error('Error detected while merging:', error)
	}
	const watch = new CheapWatch({ dir })
	await watch.init()
	folderMonitors.push(new Promise(() => {
		watch.on('+', event => {
			console.log('Detected file change (+):', event.path)
			merge().then(onSuccess, onError)
		})
		watch.on('-', event => {
			console.log('Detected file change (-):', event.path)
			fs.unlinkSync(path.join(output, event.path))
			merge().then(onSuccess, onError)
		})
	}))
}

const execute = watchSite => async opts => {
	if (!opts.template || !opts.input || !opts.merged || !opts.output) {
		console.error('Template, input, merged, and output are required properties.')
		process.exit(1)
	}

	const input = path.resolve(opts.input)
	const merged = path.resolve(opts.merged)
	const output = path.resolve(opts.output)
	const templates = Array.isArray(opts.template)
		? opts.template
		: [ opts.template ]

	console.log('Cleaning merged content:', merged)
	await premove(merged)

	console.log('Cleaning 11ty compiled content:', output)
	await premove(output)

	const merge = async () => {
		await mergefs({
			output: merged,
			input: [
				...templates,
				input
			]
		})
	}

	console.log(`Merging ${templates.length} template${templates.length > 1 ? 's' : ''} and your site to:`, merged)
	await merge()

	if (watchSite) {
		await addWatcher(merge, output, input)
		for (const template of templates) {
			await addWatcher(merge, output, path.resolve(template))
		}
	}

	console.log('Building site with eleventy...')
	
	const args = [
		`--input=./`,
		`--output=${path.join('../', opts.output)}`
	]
	if (watchSite) {
		args.push('--watch')
		args.push('--serve')
		if (opts.port) {
			args.push(`--port=${opts.port}`)
		}
	}

	const eleventyProcess = new Promise(resolve => {
		try {
			const exe = spawn(locateEleventyBin(), args, { cwd: merged, stdio: 'inherit' })
			exe.on('close', code => {
				if (code) {
					console.error('Detected error on Eleventy exit...', code)
				}
				resolve()
			})

		} catch (error) {
			console.error('Unexpected error while trying to run Eleventy:', error)
			resolve()
		}
	})

	await Promise.all([ eleventyProcess, ...folderMonitors ])

	console.log('Everything is done!')
}

const prog = sade('an11ty')

prog
	.version(version)
	.option('--input, -s', 'Path to folder containing site content and settings.', 'site')
	.option('--template, -t', 'Path to one or more folders for templates.')
	.option('--merged, -m', 'Path to temporary folder containing copies and final compiled output.', '_merged')
	.option('--output, -o', 'Path to 11ty final site output.', '_site')

prog
	.command('build')
	.describe('Build the entire static site and all assets.')
	.example('build --template=node_modules/@an11ty/template/src # using defaults')
	.example('build --site=blog --output=public --template=design # custom everything')
	.example('build -t=node_modules/@an11ty/template/src -t=design # template with overrides')
	.action(execute(false))

prog
	.command('dev')
	.option('--port, -p', 'Port to serve the static site.', '8080')
	.describe('Build and serve the site and all assets and watch for changes.')
	.example('dev --port=8080 --template=node_modules/@an11ty/template/src')
	.action(execute(true))

prog.parse(process.argv)
