#!/usr/bin/env node

const { version } = require('./package.json')
const { promisify } = require('util')
const { spawn } = require('child_process')
const CheapWatch = require('cheap-watch')
const fs = require('fs')
const ncp = promisify(require('ncp').ncp)
const path = require('path')
const rimraf = promisify(require('rimraf'))
const sade = require('sade')

const copyFile = promisify(fs.copyFile)

const execute = watch => async opts => {
	if (!opts.template || !opts.input || !opts.output) {
		console.error('Template, input, and output are required properties.')
		process.exit(1)
	}
	const input = path.resolve(opts.input)
	const output = path.resolve(opts.output)

	console.log('Cleaning old copy:', output)
	await rimraf(output)

	console.log('Locating template:', opts.template)
	let templateDir
	try {
		templateDir = path.dirname(require.resolve(opts.template, {
			paths: [ process.cwd() ]
		}))
	} catch (error) {
		if (error.code === 'MODULE_NOT_FOUND') {
			console.error('Could not locate the template. TODO add better message')
		} else {
			throw error
		}
	}
	if (opts.templatePath) {
		templateDir = path.join(templateDir, templatePath)
	}

	console.log('Merging template and your site to:', output)
	await ncp(templateDir, output)

	console.log('Building...')
	// since eleventy resolves to the JS and not the bin, we need
	// to safely locate the bin file
	let eleventyPath = require.resolve('@11ty/eleventy', {
		paths: [ process.cwd() ]
	})
	let json
	while (!json) {
		try {
			json = JSON.parse(fs.readFileSync(path.join(eleventyPath, 'package.json'), 'utf8'))
		} catch (error) {
			if (error.code === 'ENOTDIR' || error.code === 'ENOENT') {
				eleventyPath = path.resolve(eleventyPath, '..')
			} else {
				console.error(error)
				process.exit(1)
			}
		}
	}
	const eleventyBin = path.join(eleventyPath, json.bin && json.bin.eleventy)
	const args = watch
		? [
			'--watch',
			'--serve',
			opts.port && `--port=${opts.port}` || undefined
		].filter(Boolean)
		: []

	const eleventyProcess = new Promise(resolve => {
		try {
			const exe = spawn(eleventyBin, args, { cwd: output, stdio: 'inherit' })
			exe.on('close', code => {
				if (code) {
					console.error('Detected error on Eleventy exit...', code)
				}
				resolve()
			})
		} catch (error) {
			console.error('Unexpected error while trying to run Eleventy:', error)
			resolve()
		}
	})

	let folderMonitor = Promise.resolve()
	if (watch) {
		const watch = new CheapWatch({ dir: input })
		await watch.init()
		folderMonitor = new Promise(() => {
			watch.on('+', event => {
				console.log('Detected file change (+):', event.path)
				fs.copyFileSync(
					path.join(input, event.path),
					path.join(output, event.path)
				)
			})
			watch.on('-', event => {
				console.log('Detected file change (-):', event.path)
				fs.unlinkSync(path.join(output, event.path))
			})
		})
	}

	await Promise.all([ eleventyProcess, folderMonitor ])

	console.log('Everything is done!')
}

const prog = sade('an11ty')

prog
	.version(version)
	.option('--input, -i', 'Path to folder containing site content and settings.', 'site')
	.option('--output, -o', 'Path to temporary folder containing copies and final compiled output.', '_copy')
	.option('--template, -t', 'Provide the module name of the installed template.')
	.option('--templatePath, -T', 'If the template site files are in a sub-folder, specify the sub-folder here.')

prog
	.command('build')
	.describe('Build the entire static site and all assets.')
	.example('build --input=site --output=_copy --template=an11ty-template')
	.action(execute(false))

prog
	.command('dev')
	.option('--port, -p', 'Port to serve the static site.', '8080')
	.describe('Build and serve the site and all assets and watch for changes.')
	.example('build --input=site --output=_copy --template=an11ty-template --port=8080')
	.action(execute(true))

prog.parse(process.argv)
